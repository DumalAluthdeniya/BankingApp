@model ManageExchangesViewModel
@using BankingApp.Areas.BackOffice;
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Context
@using BankingApp.Data;
@inject ISharedViewLocalizer localizer

@{
	var currentUser = await UserManager.GetUserAsync(User);
	new ManagePermissions(Context);
	var permissions = await ManagePermissions.Get(currentUser);
}

<div class="d-flex justify-content-between align-items-center mb-4">
	<h3 class="text__heading"> @localizer["Update Currency"] @Model.Exchange.Name (@Model.Exchange.Symbol)</h3>
	<span class="nav-item" data-bs-dismiss="modal"><img src="../assets/svg/close.svg" alt="" srcset=""></button>
</div>
<div class="row">
	<div class="col-lg-6">
		<input type="hidden" asp-for="Exchange.Id" />
		<input type="hidden" asp-for="Exchange.Name" />
		<input type="hidden" asp-for="User" />

		@if (permissions.FirstOrDefault(p => p.Permission.Name.Equals("Manage Exchange")).PermissionType == PermissionType.Update)
		{
			<p class="fs-5 fw-800">@localizer["Your base currency is"] @Model.BaseCurrency</p>
			<div class="col-lg-12 my-4 p-4 bg__secondary">

				<div class="row">
					<div class="d-flex flex-column col-4 fs-4">
						<label> @localizer["Market Rate"]</label>
						<input id="marketRate" value="@Model.Exchange.MarketRate" class="text__input mt-1 p-2" placeholder="">
					</div>

					<div class="d-flex flex-column col-4 fs-4">
						<label> @localizer["Selling Rate"] </label>
						<input id="sellingRate" value="@Model.Exchange.SellingRate" class="text__input mt-1 p-2" placeholder="">
					</div>
					<div class="d-flex flex-column col-4 fs-4">
						<label> @localizer["Buying Rate"] </label>
						<input id="buyingRate" value="@Model.Exchange.BuyingRate" class="text__input mt-1 p-2" placeholder="">
					</div>

					<div class="d-flex flex-column col-4 fs-4">
						<label> @localizer["Spread"] </label>
						<input id="spread" value="@Model.Exchange.Spread" class="text__input mt-1 p-2" readonly>
					</div>

					<div class="col-lg-12 mt-2 text-end">
						<button id="btnExchangeUpdate" type="button"
							class="btn_solid col-4 fs-4 bg_primary_hover text-white submitBtn">
							@localizer["Update"]
						</button>
					</div>

				</div>
			</div>
		}
		<div class="mt-4">
			<p class="s-3 fs-4 fw-600">@localizer["History"]</p>
			<div class="d-flex justify-content-between align-items-center">
				<p class="m-0">@localizer["Rate"]</p>
				@*<select class="nav-item" name="" id="" style="width:100px;margin: 0;"
				class="col-lg-2 form-select form-control text__input">
				<option value="spread">spread</option>
				</select>*@
			</div>
			<div id="chart"></div>
		</div>
	</div>
	<div class="col-lg-6">
		<p>
			@localizer["Change History"]
		</p>
		<table id="tblHistory" class="table">
			<thead class="thead-dark">
				<tr class="bg_primary text-white">
					<th scope="col" style="padding:1rem;">@localizer["Date"]</th>
					<th scope="col" style="padding:1rem;">@localizer["Market Rate"]</th>
					<th scope="col" style="padding:1rem;">@localizer["Selling Rate"]</th>
					<th scope="col" style="padding:1rem;">@localizer["Buying Rate"]</th>
					<th scope="col" style="padding:1rem;">% @localizer["Spread"]</th>
					<th scope="col" style="padding:1rem;">@localizer["Updated By"]</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var e in Model.History.OrderByDescending(e => e.UpdatedDate))
				{
					decimal changePercentage = 0;
					var change = @Model.Exchange.SellingRate - @Model.Exchange.BuyingRate;
					if (change > 0)
						changePercentage = (change / @Model.Exchange.BuyingRate) * 100;


					<tr class="border-1">
						<th style="padding:1rem;">@e.UpdatedDate.ToString("g", CultureInfo.CurrentCulture)</th>
						<td style="padding:1rem;">@e.MarketRate</td>
						<td style="padding:1rem;">@e.SellingRate</td>
						<td style="padding:1rem;">@e.BuyingRate</td>
						@*<td style="padding:1rem;">@(Math.Round(changePercentage, 2)) %</td>*@
						<td style="padding:1rem;">@(e.SellingRate - e.BuyingRate)</td>
						<td style="padding:1rem;">@e.UpdatedBy.FirstName @e.UpdatedBy.LastName</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>
<script>

	$("#tblHistory").dataTable({
		"ordering": false,
	});

	var previousMRate = $("#marketRate").val();
	var previousSRate = $("#sellingRate").val();
	var previousBRate = $("#buyingRate").val();


	$("#sellingRate").keyup(function () {
		var hasComma = $(this).val().indexOf(',') != -1;

		var sRate = $("#sellingRate").val().replace(",", ".");
		var bRate = $("#buyingRate").val().replace(",", ".");
		if (!hasComma)
			$("#spread").val((+sRate - +bRate).toFixed(2));
		else
			$("#spread").val((+sRate - +bRate).toFixed(2).replace(".", ","));

	});

	$("#buyingRate").keyup(function () {
		var hasComma = $(this).val().indexOf(',') != -1;

		var sRate = $("#sellingRate").val().replace(",", ".");
		var bRate = $("#buyingRate").val().replace(",", ".");
		if (!hasComma)
			$("#spread").val((+sRate - +bRate).toFixed(2));
		else
			$("#spread").val((+sRate - +bRate).toFixed(2).replace(".", ","));
	});

	$("#btnExchangeUpdate").click(function () {
		$(".submitBtn").prop('disabled', true);

		var exhangeId = $("#Exchange_Id").val();
		var marketRate = $("#marketRate").val();
		var sRate = $("#sellingRate").val();
		var bRate = $("#buyingRate").val();

		if (previousMRate != marketRate || previousBRate != bRate || previousSRate != sRate) {
			var spread = $("#spread").val();
			var user = $("#User").val();
			var date = new Date().toLocaleString();
			var row = '<tr class="border-1"><th>' + date + '</th><td style="padding: 1rem;">' + marketRate + '</td><td style="padding: 1rem;">' + sRate + '</td><td style="padding: 1rem;">' + bRate + '</td><td style="padding: 1rem;">' + spread + '</td><td style="padding: 1rem;">' + user + '</td></tr>';
			$.ajax({
				type: "POST",
				async: true,
				url: '/BackOffice/Exchange/UpdateExchnageDetails',
				data: { "exhangeId": exhangeId, "marketRate": marketRate, "sRate": sRate, "bRate": bRate, "spread": spread },
				success: function (response) {
					if (response) {
						$("#tblHistory > tbody > tr:first").before(row);
						toastr.info('Successfully updated');
						previousMRate = marketRate;
						previousBRate = bRate;
						previousSRate = sRate;
					}
					$(".submitBtn").prop('disabled', false);

				},
				error: function (error) {
					toastr.error('Error occured. Please try again later.');
				}
			})
		}
		else{
			toastr.warning('Values have not changed.');
		}
	});

	var ratesMarket;
	var ratesSelling;
	var ratesBuying;
	var months;

	$(function () {
		setTimeout(loadajax, 1000);
	});

	function loadajax() {
		var currency = $("#Exchange_Id").val();
		$.ajax({
			type: "GET",
			async: true,
			url: '/BackOffice/Exchange/GetRates',
			data: { "currency": currency },
			success: function (data) {
				ratesMarket = data.ratesMarket;
				ratesBuying = data.ratesBuying;
				ratesSelling = data.ratesSelling;
				months = data.months;

				if (ratesMarket.length < 12) {
					var add = new Array(12 - ratesMarket.length).fill(0);
					ratesMarket = add.concat(ratesMarket);
				}
				if (ratesBuying.length < 12) {
					var add = new Array(12 - ratesBuying.length).fill(0);
					ratesBuying = add.concat(ratesBuying);
				}
				if (ratesSelling.length < 12) {
					var add = new Array(12 - ratesSelling.length).fill(0);
					ratesSelling = add.concat(ratesSelling);
				}
				console.log(ratesMarket)

				loadChart(ratesMarket, ratesBuying, ratesSelling, months)
			},
			error: function (error) {
				alert('Error occured. Please try again later.');
			}
		});
	}

	function loadChart(ratesMarket, ratesBuying, ratesSelling, months) {
		var options = {
			series: [
				{
					name: "Market Rate",
					data: ratesMarket
				},
				{
					name: "Buying Rate",
					data: ratesBuying
				},
				{
					name: "Selling Rate",
					data: ratesSelling
				}
			],
			chart: {
				height: 350,
				type: 'line',
				zoom: {
					enabled: false
				},
				toolbar: {
					show: false
				},
			},
			dataLabels: {
				enabled: false
			},
			stroke: {
				width: 2,
				curve: 'smooth'
			},
			grid: {
				borderColor: '#8C89B480',
				strokeDashArray: 3
			},
			xaxis: {
				categories: months
			}@*,
				yaxis: {
				forceNiceScale: true,
				min: 0,
				max: 2
				}*@
								};

	var chart = new ApexCharts(document.querySelector("#chart"), options);
	chart.render();
							}
</script>
